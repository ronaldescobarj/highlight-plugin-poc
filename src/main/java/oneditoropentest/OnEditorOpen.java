package oneditoropentest;

import at.aau.softwaredynamics.classifier.AbstractJavaChangeClassifier;
import at.aau.softwaredynamics.classifier.NonClassifyingClassifier;
import at.aau.softwaredynamics.classifier.entities.FileChangeSummary;
import at.aau.softwaredynamics.classifier.entities.SourceCodeChange;
import at.aau.softwaredynamics.gen.NodeType;
import at.aau.softwaredynamics.gen.OptimizedJdtTreeGenerator;
import at.aau.softwaredynamics.matchers.JavaMatchers;
import at.aau.softwaredynamics.runner.git.FilePairAnalyzer;
import at.aau.softwaredynamics.runner.util.ClassifierFactory;
import com.github.gumtreediff.gen.TreeGenerator;
import com.github.gumtreediff.matchers.Matcher;
import com.google.gson.Gson;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.event.EditorFactoryEvent;
import com.intellij.openapi.editor.event.EditorFactoryListener;
import com.intellij.openapi.editor.impl.DocumentImpl;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import gitremote.GitRemote;
import models.DiffRow;
import models.GitCommit;
import org.eclipse.jgit.api.Git;
import org.jetbrains.annotations.NotNull;
import services.EditorService;
import services.GitRemoteService;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;

public class OnEditorOpen implements EditorFactoryListener {
    @Override
    public void editorCreated(@NotNull EditorFactoryEvent event) {
        Editor editor = event.getEditor();
        Document document = editor.getDocument();
        String currentFileContent = document.getText();
        VirtualFile virtualFile = FileDocumentManager.getInstance().getFile(document);
        String filePath = virtualFile.getPath();
        Project project = editor.getProject();
        GitRemoteService gitRemoteService = project.getService(GitRemoteService.class);
        String projectPath = project.getBasePath();
        String relativePath = filePath.replaceAll(projectPath, "");
        String repoOwner = gitRemoteService.getRepoOwner();
        String repoName = gitRemoteService.getRepoName();
        String gitApiUrl = "https://api.github.com/repos/" + repoOwner + "/" + repoName;
        GitRemote gitRemote = new GitRemote(gitApiUrl);
        GitCommit[] commits = gitRemote.getCommits(gitApiUrl);
        String previousCommitSha = commits[1].getSha();
        String previousCommitFileContent = gitRemote.getPreviousCommitFileContent(previousCommitSha, relativePath);

        Class<? extends AbstractJavaChangeClassifier> classifierType = NonClassifyingClassifier.class;
        Class<? extends Matcher> matcher = JavaMatchers.IterativeJavaMatcher_V2.class;
        TreeGenerator generator = new OptimizedJdtTreeGenerator();
        ClassifierFactory classifierFactory = new ClassifierFactory(classifierType, matcher, generator);
        AbstractJavaChangeClassifier classifier = classifierFactory.createClassifier();
        try {
            classifier.classify(previousCommitFileContent, currentFileContent);
            FileChangeSummary fileChangeSummary = new FileChangeSummary("NO_COMMIT", "NO_COMMIT", "src", "dst");
            fileChangeSummary.setChanges(classifier.getCodeChanges());
            fileChangeSummary.setMetrics(classifier.getMetrics());
            ArrayList<DiffRow> diffs = new ArrayList<>();
            for(SourceCodeChange change : fileChangeSummary.getChanges()) {
                diffs.add(new DiffRow(fileChangeSummary.getCommit(),
                        change.getNode().getLabel(),
                        change.getAction().getName(),
                        String.valueOf(NodeType.getEnum(change.getNodeType())),
                        change.getSrcInfo().getStartLineNumber(),
                        change.getSrcInfo().getEndLineNumber(),
                        change.getDstInfo().getStartLineNumber(),
                        change.getDstInfo().getEndLineNumber(),
                        fileChangeSummary.getDstFileName()));
            }
            EditorService editorService = project.getService(EditorService.class);
            editorService.setDiffs(diffs);
        } catch(Exception e) {
            System.out.println("fallo");
        }
    }

    @Override
    public void editorReleased(@NotNull EditorFactoryEvent event) {
        System.out.println("sale");
    }
}
