package oneditoropentest;

import at.aau.softwaredynamics.runner.git.FilePairAnalyzer;
import com.google.gson.Gson;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.event.EditorFactoryEvent;
import com.intellij.openapi.editor.event.EditorFactoryListener;
import com.intellij.openapi.editor.impl.DocumentImpl;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import org.jetbrains.annotations.NotNull;
import services.GitRemoteService;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class OnEditorOpen implements EditorFactoryListener {
    @Override
    public void editorCreated(@NotNull EditorFactoryEvent event) {
        Editor editor = event.getEditor();
        Document document = editor.getDocument();
        VirtualFile virtualFile = FileDocumentManager.getInstance().getFile(document);
        String filePath = virtualFile.getPath();
        Project project = editor.getProject();
        GitRemoteService gitRemoteService = project.getService(GitRemoteService.class);
        String projectPath = project.getBasePath();
        String relativePath = filePath.replaceAll(projectPath, "");
        String repoOwner = gitRemoteService.getRepoOwner();
        String repoName = gitRemoteService.getRepoName();
//        String text = document.getText();

        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder(
                URI.create("https://api.github.com/repos/" + repoOwner + "/" + repoName + "/contents" + relativePath))
                .header("accept", "application/json")
                .build();
        HttpResponse.BodyHandler<String> bh = HttpResponse.BodyHandlers.ofString();
//        Gson gson = new Gson();
//        GitFile gitFile = new GitFile();
        try {
            HttpResponse<String> response = client.send(request, bh);
            String stringResponse = response.body();
            System.out.println(stringResponse);
//            gitFile = gson.fromJson(response.body(), GitFile.class);
        } catch(InterruptedException | IOException exception) {
            System.out.println("test");
        }
    }

    @Override
    public void editorReleased(@NotNull EditorFactoryEvent event) {
        System.out.println("sale");
    }
}
